
HTML
 - "what" contents you want to place on your webpage
 - define the structure of document 


CSS
 - "how" content should appear on the webpage
 - to define the 'style rules' for webpages


JavaScript
  - scripting langauages
  - to provide functionalities on webpages
	- DOM manipulation
	- Event handling 
	- Business logic
	- Ajax calls

Bootstrap
	- html+css+jquery library
	- resposibe web pages

ES6 - ECMAScript 2015 - Adavance Javascript

	- let/const keywords
	- arrow function
	- template lieteral
	- object de-structuring
	- array spread operators
	- default parameters
	- optional parameters
	- rest parameter
	- classes/objects

TypeScript
	- Superset of ES6
	- additional features i.e. types, decorators
	- cannot execute typescript in browser
	- typescript code converted into javascript

Environment setup
------------------------

1. Install Node

	> node -v
	
2. NPM - node package manager

	- installed along with node 
	- to install / manage all the dependencies 

	> npm -v

3. Editors

	- Atom
	- visual stuio code
	- WebStorm IDE / jetbrains intellij idea

4. install typescript 

	>npm install -g typescript

	>tsc -v


- let/const keywords
-------------------------
	- const keyword

		- declare constants
		- cannot redeclare/reupdate

	- let keyword
		- block scoped variables 
		- cannot redeclare inside same scope / 
		- update variable

	- var keyword

		- global scoped
		- takes the context of the function on which they are declared 
		- can be redeclared / updated 


Setup a project for typescript with a development server
----------------------------------------------------------

	> npm init		<-- create package.json
	
	> npm install http-server --save	<--download http-server module + update package.json

	> npm install

- arrow function
------------------------
	- alternative way to create a function

- template lieteral / String interpolation
-----------------------------

	`Hello ${person.fname}  ${person.lname}`

- object de-structuring

	function sayhello({fname, lname}){
    		//return "hello " + person.fname + " " + person.lname
    		return `Hello ${fname} ${lname}`
	}

- array spread operators

	let array1 = ['one','two','three']

	let array2 = array1.concat(['four','five']);

		or
	let array2 = [...array1,'four','five']

- default parameters

	function arithAdd(a, b=0){
		return a+b;
	}

	arithAdd();

- optional parameters

	function arithAdd(a:number, b?:number){
		//code
	}

	let a:number;


- Rest parameter

	- variable number of parameters
	
	arithAdd(...value){

		//value is an array of all the values

	}

	arithAdd(a, b, ...value){	
	
	}

	arithAdd(1,2,3,5)
	arithAdd(1,2,3)
	arithAdd(1,2)


- Type System in typescript

	1. primitive types and type inference 

		- number
		- string
		- boolean

		let message = "welcome";
			//infer the type as string

		let message:string = "welcome"


		let age = 20;
		let age:number = 20 

		let result = true;
		let result:boolean = true;

	2. object type and inference

		let person = {

			}

	3. create a new object type

		type PersonType= {fname:string, lname:string}

		let p1:PersonType = {
			fname : "Vishal",
			lname : "Shah"
		};

		type PlayerType = {fname:string, lname:string}
		let p2:PlayerType = 

	4. create a new object type using 'interface'

		interface PersonType{
    			fname:string
    			lname:string
		}

	5. create a new function type


		type messageCreator = (string)=>string

		let sayHello:messageCreator = function(name:string):string{
    			return "hello " + name
		}

		let sayBye:messageCreator = function(name:string):string{
    			return "bye " + name
		}

	6. Arrays

		let nums = [1,2,3,4,5]

	7. Tuple

	8. enum 

		enum PlayerPosition{
   			 Guard,
   			 Forward,
    			Center
		}

		type PlayerTuple = [string, PlayerPosition]


		let player:PlayerTuple = ['Vishal', PlayerPosition.Guard]    //0,1,2     

	9. union type

		let x:number|string = 10

	10. any type

		let a:any	

- OOPS : typescript

	1. classes in typescript

		class SuperHero{

		}

	2. define properties and methods in a class

		class SuperHero{

			name: string
			editor:string
			creationYear:number

			showHero(){
			   return `Hero : ${this.name}  ${this.editor}`
			}
		}

	3. provide a constructor to a class

		class SuperHero{

			name: string
			editor:string
			creationYear:number

			constructor(name:string, editor:string, creationYear:number){
				this.name = name;
				this.editor = editor
				this.creationYear=creationYear;
			}

			showHero(){
			   return `Hero : ${this.name}  ${this.editor}`
			}
		}

	4. access modifiers

		public,private, protected, readonly

	
	5. abbreviated syntax for defining and intializing properties 

		class SuperHero{

			constructor(public name:string, 
				    public editor:string, 
				    private creationYear?:number){
		
			}
		}

	6. Object of the class

		let superman = new SuperHero("Superman", "DC Comics", 1948)

		let superman = new SuperHero("Superman", "DC Comics")

	7. Abstract class 

		abstract class Hero{

			abstract createMessage():string;

		}

	8. inheritance in typescript 

		class FlyingHero extends SuperHero{

		}

	9. interface

		interface CanFly{
			fly();
		}
		
		class FlyingHero implments CanFly{
			
		}

- Angular Framework

	- gives clean and loosely coupled structure
	- Easy to understand and maintain
	- include a lot of utility code - reusable code -
	- more testable
	
- Angular CLI
----------------------------
	- command line interface 
	- to manage angular projects 

(make sure : Node and npm is installed)

1. Install Angular CLI 

	> npm install -g @angular/cli

	> ng -v

- Angular Helloworld project
----------------------------------

	> ng new hello-world





 


















