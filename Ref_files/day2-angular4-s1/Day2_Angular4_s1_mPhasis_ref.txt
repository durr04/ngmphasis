Angular Framework
-------------------------

	- gives clean and loosely coupled structure
	- easy to understand and maintain
	- includes a lot of utility code - reusability
	- more testable
	- ...

1. Install Angular CLI

	--> command line interface
	--> manage angular projects

	> npm install -g @angular/cli
	
	> ng -v

*==>Create angular project

	>ng new first-app

**==>directory structure
	|
	|-->e2e
	|   |-> end to end test code
	|
	|-->node_modules
	|	|-> 3rd party libraries
	|	|-> purely for development
	|
	|-->src
	|   |
	|   |-->app
	|   |	|-> app.module.ts
	|   |   |
	|   |	|-> app.component.ts
	|   |   |
	|   |	|-> app.component.html
	|   |   |
	|   |
	|   |-->assets
	|   |	 |-> images,files, i.e. static assets
	|   |
	|   |-->environments
	|   |	|-> configuration for diff. environments
	|   |
	|   |-->index.html
	|   |	|-> <app-root></app-root>
	|   |
	|   |-->main.ts
	|   |	|-> starting point of application
	|   |   |-> responsible to bootstrap the root module
	|   |
	|   |-->styles.css
	|   |	|-->global css file.. define styles rules
	|   |
	|   |-->polyfills.ts
	|   |	|->import some scripts required to run angular app
	|   |
	|   |-->test.ts
	|   |	|-> set up some test environment
	|
	|-->.angular-cli.json
	|	|-> configuration file for angular-cli
	|
	

-> Every angular app has at least one root module usually named as "AppModule" 		(app.module.ts)
-> Module is a container .. 
->every angular app has at least one root component usually called as  "AppComponent"
	(app.component.ts)

**=> Webpack
--------------------------
	- angular cli uses this tool to build application
	- it gets all of our scripts, stylesheets, html etc. and combines and bundles 		them,minify them and inject into index.html

**=>start the application 

	ng serve


Angularjs		angular2			angular4	
 or			|
angular 1.x		|
   |			|
2010			2016
  |			|
javascript 		typescript


	2.0	2.1	2.2	2.3		2.4

		@angular/core  2.3.0
		@angular/compiler 2.3.0
		@angular/http 2.3.0
		@angular/router 3.3.0


Building blocks of angular applications
---------------------------------------------
1. Component 
	- encapulates the data, html markup and logic for a view
	- root component is AppComponent

2. Module
	- container for a group of related components
	- every angular app has at least one module i.e. AppModule


		SupplierModule	OrderModule	AdminModule

3. Libraries 
	- angular ships as a collection of libraries 
	
		@angular/core		
		@angular/forms		

4. Template
	- a form of html that tells angular how to render the component 


5. Metadata
	- tells angular how to process a class
	- we can attach metadata to a class using "decorator"

		@Component()	
		@NgModule()
		@Pipe()
		@Input()
		@Output()

**==>AppModule
---------------------------
	- root module of our application which bundles the funtionalities of our app

	

	@NgModule({

		declarations: [
			..here you can declare all the components, pipes, directives..
		],

		imports : [
			..here you can import other Modules that your application uses
		],

		providers:[
			..here you can declare services that your application uses 
		],

		bootstrap:[
			..here declare which component to bootstrap
		]

	})
	export class AppModule{
	}


**=>Create a Component
-----------------------------------
	1. create the component manually

		a. create a typescript file "header.component.ts"

			
			@Component({
    				selector:'app-header',
    				templateUrl:'./header.component.html'
			})
			export class HeaderComponent{

			}
		b. define the html content for this component 
			header.component.html

			<h1>this is header</h1>

		c. declare this new component in app.module.ts

		d. use the <app-header> selector 


	2. create the component using cli command

		>ng generate component NavBar

		>ng g c Navbar


**==> Data Binding
---------------------------------------------------

	- communication between component and temlate 


	1. String Interpolation

		- display some output in template i.e. heading, paragraphs, div, span 			etc.
		- show dynamic values between heading, paragraphs, div, span use string 			interpolation

		<p> {{ location }} </p>

	2. Property Binding 

		<input type="button" [disabled]="!isActive">

		--> property binding and string interpolation, both are only one way
				from component to DOM

		-->Which properties are bindable 
			- all the DOM properties are bindable 


	3. Attribute Binding
		- when there is not mapping of html attribute with dom property

		 <td [attr.colspan]="colspanvalue">Sometext</td>


	4. class binding 
	
		- add additional css classes on the element based on a condition

		<h2 [class.bordered]="isBordered">Company Name : {{ companyName }} </h2>

	5. style binding 
	
		<h2 [style.backgroundColor]="color"> </h2>

		<h1 [style.backgroundColor]="isActive ? 'blue' : 'yellow'">This is my 			header section</h1>


	6. Event Binding 

		<input type="button" value="Click Me" (click)="onClickButton($event)">


	7. Event Filtering 

		<input type="text" (keyup.enter)="onKeyUp($event)">


**==> Input and Output Bindings
------------------------------------------

	- @Input() decorator is used to communicate form parent to child 
	- @Output() decorator is used to communicate from child to parent 





